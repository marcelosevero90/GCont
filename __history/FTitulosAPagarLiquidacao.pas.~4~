unit FTitulosAPagarLiquidacao;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIFrame, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, uniGUIBaseClasses, uniImageList,
  uniRadioGroup, uniDBRadioGroup, uniDBEdit, uniToolBar, uniScrollBox,
  Vcl.Imaging.pngimage, uniImage, uniEdit, uniPanel, uniBasicGrid, uniDBGrid,
  uniDateTimePicker, uniLabel, uniGroupBox, uniButton, uniBitBtn, uniPageControl;

type
  TUniFrame1 = class(TUniFrame)
    pgMenu: TUniPageControl;
    tsLista: TUniTabSheet;
    UniToolBar1: TUniToolBar;
    btAtualizarDados: TUniBitBtn;
    UniGroupBox1: TUniGroupBox;
    UniLabel2: TUniLabel;
    dtImplantIni: TUniDateTimePicker;
    dtImplantFim: TUniDateTimePicker;
    UniLabel1: TUniLabel;
    dtVenctoIni: TUniDateTimePicker;
    dtVenctoFim: TUniDateTimePicker;
    UniGroupBox2: TUniGroupBox;
    dbEmitFiltro: TUniDBGrid;
    UniPanel5: TUniPanel;
    btMarcaTdsEmit: TUniBitBtn;
    btDesmarcaTdsEmit: TUniBitBtn;
    edtPesqEmitRap: TUniEdit;
    UniGroupBox3: TUniGroupBox;
    UniPanel6: TUniPanel;
    UniBitBtn3: TUniBitBtn;
    UniBitBtn4: TUniBitBtn;
    edtPesqPortRap: TUniEdit;
    dbPortadFiltro: TUniDBGrid;
    UniGroupBox4: TUniGroupBox;
    UniPanel7: TUniPanel;
    UniBitBtn5: TUniBitBtn;
    UniBitBtn6: TUniBitBtn;
    edtPesqFormaPagRap: TUniEdit;
    UniDBGrid1: TUniDBGrid;
    UniLabel5: TUniLabel;
    edtOSIniFiltro: TUniNumberEdit;
    edtOSFimFiltro: TUniNumberEdit;
    UniPanel1: TUniPanel;
    UniPanel2: TUniPanel;
    UniPanel3: TUniPanel;
    imgVis: TUniImage;
    imgEdit: TUniImage;
    imgCancel: TUniImage;
    tsManut: TUniTabSheet;
    sbManut: TUniScrollBox;
    pgManutTitAR: TUniPageControl;
    tsDadosTitGeral: TUniTabSheet;
    UniScrollBox1: TUniScrollBox;
    dbLista: TUniDBGrid;
    UniToolBar3: TUniToolBar;
    UniToolButton1: TUniToolButton;
    UniToolButton2: TUniToolButton;
    UniBitBtn1: TUniBitBtn;
    btEfetivar: TUniBitBtn;
    btMarcaTdsTitLiq: TUniBitBtn;
    btDesmarcaTdsTitLiq: TUniBitBtn;
    tsManutTitAR: TUniTabSheet;
    UniLabel10: TUniLabel;
    edtCod: TUniDBEdit;
    UniLabel9: TUniLabel;
    edtNome: TUniDBEdit;
    UniToolBar2: TUniToolBar;
    UniToolButton4: TUniToolButton;
    btCancelaAlter: TUniBitBtn;
    btConfAlter: TUniBitBtn;
    UniLabel21: TUniLabel;
    edtPercMulta: TUniDBFormattedNumberEdit;
    UniLabel22: TUniLabel;
    edtPercJuros: TUniDBFormattedNumberEdit;
    UniLabel23: TUniLabel;
    edtPercDescto: TUniDBFormattedNumberEdit;
    UniLabel3: TUniLabel;
    edtVlMulta: TUniDBFormattedNumberEdit;
    UniLabel4: TUniLabel;
    edtVlJuros: TUniDBFormattedNumberEdit;
    UniLabel6: TUniLabel;
    edtVlDescto: TUniDBFormattedNumberEdit;
    UniLabel7: TUniLabel;
    UniDBFormattedNumberEdit4: TUniDBFormattedNumberEdit;
    UniLabel8: TUniLabel;
    UniDBFormattedNumberEdit8: TUniDBFormattedNumberEdit;
    rgMulta: TUniDBRadioGroup;
    rgJuros: TUniDBRadioGroup;
    rgDesconto: TUniDBRadioGroup;
    UniNativeImageList1: TUniNativeImageList;
    fdFormaPagto: TFDQuery;
    fdFormaPagtocodEmpresa: TIntegerField;
    fdFormaPagtocodEstabel: TIntegerField;
    fdFormaPagtocodFormaPagto: TIntegerField;
    fdFormaPagtoFC_SELEC: TBooleanField;
    fdFormaPagtonomeFormaPagto: TStringField;
    dsFormaPagto: TDataSource;
    fdEmitente: TFDQuery;
    fdEmitentecodEmpresa: TIntegerField;
    fdEmitentecodEstabel: TIntegerField;
    fdEmitentecodEmitente: TIntegerField;
    fdEmitentenomeEmitente: TStringField;
    fdEmitentecgc: TStringField;
    fdEmitentesituacao: TIntegerField;
    fdEmitenteidentificacao: TIntegerField;
    fdEmitenteemail: TStringField;
    fdEmitentetelefone: TStringField;
    fdEmitentecelular: TStringField;
    fdEmitentedataImplantacao: TDateField;
    fdEmitenteFC_SELEC: TBooleanField;
    dsEmitente: TDataSource;
    fdPortador: TFDQuery;
    fdPortadorcodEmpresa: TIntegerField;
    fdPortadorcodEstabel: TIntegerField;
    fdPortadorcodPortador: TIntegerField;
    fdPortadornomePortador: TStringField;
    fdPortadorcodBanco: TIntegerField;
    fdPortadoragencia: TStringField;
    fdPortadorcontaCorrente: TStringField;
    fdPortadortipoPortador: TIntegerField;
    fdPortadorvlSaldoInicial: TBCDField;
    fdPortadorvlSaldoAtual: TBCDField;
    fdPortadorFC_SELEC: TBooleanField;
    fdPortadorpercMultaAtraso: TBCDField;
    fdPortadorpercJuroDia: TBCDField;
    fdPortadorpercDesctoAntecip: TBCDField;
    dsPortador: TDataSource;
    fdTitulosAPagarLista: TFDQuery;
    fdTitulosAPagarListacodEmpresa: TIntegerField;
    fdTitulosAPagarListacodEstabel: TIntegerField;
    fdTitulosAPagarListacodTituloAReceber: TIntegerField;
    fdTitulosAPagarListadescricao: TStringField;
    fdTitulosAPagarListacodEmitente: TIntegerField;
    fdTitulosAPagarListacodFormaPagto: TIntegerField;
    fdTitulosAPagarListasituacao: TIntegerField;
    fdTitulosAPagarListadtVencimento: TDateField;
    fdTitulosAPagarListadtEmissao: TDateField;
    fdTitulosAPagarListadtTransacao: TDateField;
    fdTitulosAPagarListacodUsuarImplant: TStringField;
    fdTitulosAPagarListaobservacao: TStringField;
    fdTitulosAPagarListavalorOriginal: TBCDField;
    fdTitulosAPagarListavalorTituloReceber: TBCDField;
    fdTitulosAPagarListavalorDesconto: TBCDField;
    fdTitulosAPagarListavalorJuros: TBCDField;
    fdTitulosAPagarListavalorMulta: TBCDField;
    fdTitulosAPagarListacodPortador: TIntegerField;
    fdTitulosAPagarListadoctoReferencia: TStringField;
    fdTitulosAPagarListaindOrigem: TIntegerField;
    fdTitulosAPagarListacodOrdemServico: TIntegerField;
    fdTitulosAPagarListacodUsuarLiquid: TStringField;
    fdTitulosAPagarListadtCancelamento: TDateField;
    fdTitulosAPagarListadtLiquidacao: TDateField;
    fdTitulosAPagarListaFC_SELEC: TBooleanField;
    fdTitulosAPagarListacodUsuarCancela: TStringField;
    fdTitulosAPagarListaFC_IMG_EDIT: TStringField;
    fdTitulosAPagarListaparcela: TIntegerField;
    fdTitulosAPagarListapercMultaAtraso: TBCDField;
    fdTitulosAPagarListapercJuroDia: TBCDField;
    fdTitulosAPagarListapercDesctoAntecip: TBCDField;
    fdTitulosAPagarListamotivoCancela: TStringField;
    fdTitulosAPagarListanomeEmitente: TStringField;
    fdTitulosAPagarListanomeFormaPagto: TStringField;
    fdTitulosAPagarListanomePortador: TStringField;
    fdTitulosAPagarListaFC_VL_JUROS: TFloatField;
    fdTitulosAPagarListaFC_VL_MULTA: TFloatField;
    fdTitulosAPagarListaFC_VL_DESCTO: TFloatField;
    fdTitulosAPagarListaFC_VL_TOTAL: TFloatField;
    fdTitulosAPagarListaFC_IND_MULTA: TIntegerField;
    fdTitulosAPagarListaFC_IND_JUROS: TIntegerField;
    fdTitulosAPagarListaFC_IND_DESCONTO: TIntegerField;
    dsTitulosAPagarLista: TDataSource;
    fdTitulosMovtoAReceber: TFDQuery;
    fdTitulosMovtoARecebercodEmpresa: TIntegerField;
    fdTitulosMovtoARecebercodEstabel: TIntegerField;
    fdTitulosMovtoARecebercodTituloAReceber: TIntegerField;
    fdTitulosMovtoARecebersequencia: TIntegerField;
    fdTitulosMovtoARecebertipoMovto: TIntegerField;
    fdTitulosMovtoAReceberdescricao: TStringField;
    fdTitulosMovtoAReceberdtMovto: TDateField;
    fdTitulosMovtoARecebercodUsuarMovto: TStringField;
    fdTitulosMovtoARecebervalorMovto: TBCDField;
    fdTitulosMovtoAReceberdescHistorico: TStringField;
    dsTitulosMovtoAReceber: TDataSource;
    fqAuxiliar: TFDQuery;
    fdPortadLiq: TFDQuery;
    fdPortadLiqcodEmpresa: TIntegerField;
    fdPortadLiqcodEstabel: TIntegerField;
    fdPortadLiqcodPortador: TIntegerField;
    fdPortadLiqnomePortador: TStringField;
    fdPortadLiqcodBanco: TIntegerField;
    fdPortadLiqagencia: TStringField;
    fdPortadLiqcontaCorrente: TStringField;
    fdPortadLiqtipoPortador: TIntegerField;
    fdPortadLiqvlSaldoInicial: TBCDField;
    fdPortadLiqvlSaldoAtual: TBCDField;
    fdPortadLiqpercMultaAtraso: TBCDField;
    fdPortadLiqpercJuroDia: TBCDField;
    fdPortadLiqpercDesctoAntecip: TBCDField;
  private
    { Private declarations }
  public
    { Public declarations }
    procedure pCalcVlTit;
    procedure pCalcTotalTitGeral;
    procedure pConfirmaAtualizacao(Sender: TComponent; AResult:Integer);
    procedure pConfirmaEfetivacao(Sender: TComponent; AResult:Integer);
  end;

implementation

{$R *.dfm}

uses Main, MainModule;


const SQLTitAcrAR = 'select gcTitulosAReceber.*, ' +
' gcEmitente.nomeEmitente, '               +
' gcFormaPagamento.nomeFormaPagto, '         +
' gcPortador.nomePortador '                    +
' from gcTitulosAReceber '                       +
' inner join gcEmitente on '                       +
' (gcEmitente.codEmpresa = gcTitulosAReceber.codEmpresa '  +
' and '                                                      +
' gcEmitente.codEstabel = gcTitulosAReceber.codEstabel and '   +
' gcEmitente.codEmitente = gcTitulosAReceber.codEmitente) '    +
' left outer join gcFormaPagamento on '                          +
' (gcFormaPagamento.codEmpresa = gcTitulosAReceber.codEmpresa and  '  +
' gcFormaPagamento.codEstabel = gcTitulosAReceber.codEstabel and '  +
' gcFormaPagamento.codFormaPagto = gcTitulosAReceber.codFormaPagto) ' +
' inner join gcPortador on '                                           +
' (gcPortador.codEmpresa = gcTitulosAReceber.codEmpresa and  '  +
' gcPortador.codEstabel = gcTitulosAReceber.codEstabel and '  +
' gcPortador.codPortador = gcTitulosAReceber.codPortador) ';




procedure TFTitulosAPagarLiquidacao.btAtualizarDadosClick(Sender: TObject);
var
sEmits, sPortads, sFormasPags, SqlExec : string;
i : integer;
begin
  if not fdEmitente.Locate('FC_SELEC',True,[loCaseInsensitive]) then begin
    MessageDlg('Selecione um ou mais Clientes para Liquidação!',mtError,[mbOK],nil);
    Exit;
  end;
  if not fdPortador.Locate('FC_SELEC',True,[loCaseInsensitive]) then begin
    MessageDlg('Selecione um ou mais Portadores para Liquidação!',mtError,[mbOK],nil);
    Exit;
  end;
  if not fdFormaPagto.Locate('FC_SELEC',True,[loCaseInsensitive]) then begin
    MessageDlg('Selecione uma ou mais Formas Pagto para Liquidação!',mtError,[mbOK],nil);
    Exit;
  end;

  edtPesqEmitRap.Clear;
  edtPesqPortRap.Clear;
  edtPesqFormaPagRap.Clear;

  sEmits        := '';
  sPortads      := '';
  sFormasPags   := '';

  fdEmitente.Filtered := False;
  fdEmitente.Filter   := ' FC_SELEC = true ';
  fdEmitente.Filtered := True;

  fdPortador.Filtered := False;
  fdPortador.Filter   := ' FC_SELEC = true ';
  fdPortador.Filtered := True;

  fdFormaPagto.Filtered := False;
  fdFormaPagto.Filter   := ' FC_SELEC = true ';
  fdFormaPagto.Filtered := True;

  fdEmitente.First;
  for I := 0 to fdEmitente.RecordCount - 1 do begin
    sEmits := sEmits + IntToStr(fdEmitentecodEmitente.AsInteger) + ',';
    fdEmitente.Next;
  end;
  fdPortador.First;
  for I := 0 to fdPortador.RecordCount - 1 do begin
    sPortads := sPortads + IntToStr(fdPortadorcodPortador.AsInteger) + ',';
    fdPortador.Next;
  end;
  fdFormaPagto.First;
  for I := 0 to fdFormaPagto.RecordCount - 1 do begin
    sFormasPags := sFormasPags + IntToStr(fdFormaPagtocodFormaPagto.AsInteger) + ',';
    fdFormaPagto.Next;
  end;

  sEmits        := Trim(sEmits);
  sPortads      := Trim(sPortads);
  sFormasPags   := Trim(sFormasPags);

  if sEmits <> '' then begin
    sEmits := Copy(sEmits,1,length(sEmits)- 1);
  end;
  if sPortads <> '' then begin
    sPortads := Copy(sPortads,1,length(sPortads)- 1);
  end;
  if sFormasPags <> '' then begin
    sFormasPags := Copy(sFormasPags,1,length(sFormasPags)- 1);
  end;

  SqlExec := SQLTitAcrAR
          + ' where gcTitulosAReceber.codEmpresa    = ' + IntToStr(MainForm.iCodEmpresa)
          + '   and gcTitulosAReceber.codEstabel    = ' + IntToStr(MainForm.iCodEstabel)
          + '   and gcTitulosAReceber.situacao      = 1 ' //aberta
          + '   and gcTitulosAReceber.dtVencimento >= ' + QuotedStr(FormatDateTime('yyyy-mm-dd',dtVenctoIni.DateTime))
          + '   and gcTitulosAReceber.dtVencimento <= ' + QuotedStr(FormatDateTime('yyyy-mm-dd',dtVenctoFim.DateTime))
          + '   and gcTitulosAReceber.dtEmissao    >= ' + QuotedStr(FormatDateTime('yyyy-mm-dd',dtImplantIni.DateTime))
          + '   and gcTitulosAReceber.dtEmissao    <= ' + QuotedStr(FormatDateTime('yyyy-mm-dd',dtImplantFim.DateTime))
          + '   and ((gcTitulosAReceber.codOrdemServico >= ' + IntToStr(Trunc(edtOSIniFiltro.Value))
          + '   and   gcTitulosAReceber.codOrdemServico <= ' + IntToStr(Trunc(edtOSFimFiltro.Value)) + ') or gcTitulosAReceber.codOrdemServico is null) ' ;

  if sEmits <> '' then begin
    SqlExec := SqlExec + ' and gcTitulosAReceber.codEmitente in (' + sEmits + ')';
  end;
  if sPortads <> '' then begin
    SqlExec := SqlExec + ' and gcTitulosAReceber.codPortador in (' + sPortads + ')';
  end;
  if sFormasPags <> '' then begin
    SqlExec := SqlExec + ' and gcTitulosAReceber.codFormaPagto in (' + sFormasPags + ')';
  end;

  fdTitulosAReceberLista.Close;
  fdTitulosAReceberLista.SQL.Clear;
  fdTitulosAReceberLista.SQL.Add(SqlExec);
  fdTitulosAReceberLista.Active := True;


  fdEmitente.Filtered := False;
  fdPortador.Filtered := False;
  fdFormaPagto.Filtered := False;

  if fdTitulosAReceberLista.IsEmpty then begin
    fdTitulosAReceberLista.Close;
    MessageDlg('Nenhum registro de Título encontrado para a seleção informada!',mtError,[mbOK],nil);
    Exit;
  end;


  //btMarcaTdsTitLiq.OnClick(Sender); //marca todos

  pCalcTotalTitGeral;

  sbManut.Enabled      := True;
  tsManut.TabVisible   := True;
  tsLista.TabVisible   := False ;
  tsManutTitAR.TabVisible   := False ;
  pgManutTitAR.TabIndex := 0;


  pgMenu.TabIndex := 1;



end;

procedure TFTitulosAPagarLiquidacao.btCancelaAlterClick(Sender: TObject);
begin

  fdTitulosAReceberLista.Cancel;

  tsManutTitAR.TabVisible := False;
  tsDadosTitGeral.TabVisible := True;
  pgManutTitAR.TabIndex := 0;
end;

procedure TFTitulosAPagarLiquidacao.btConfAlterClick(Sender: TObject);
begin
MessageDlg('Tem certeza que deseja Confirmar o Título?',mtConfirmation,mbYesNo, pConfirmaAtualizacao);
end;

procedure TFTitulosAPagarLiquidacao.btDesmarcaTdsEmitClick(Sender: TObject);
var
i:integer;
begin
  fdEmitente.First;
  for I := 0 to fdEmitente.RecordCount - 1 do begin
    fdEmitente.Edit;
    fdEmitenteFC_SELEC.AsBoolean := False;
    fdEmitente.Post;
    fdEmitente.Next;
  end;
end;

procedure TFTitulosAPagarLiquidacao.btMarcaTdsEmitClick(Sender: TObject);
var
i:integer;
begin
  fdEmitente.First;
  for I := 0 to fdEmitente.RecordCount - 1 do begin
    fdEmitente.Edit;
    fdEmitenteFC_SELEC.AsBoolean := True;
    fdEmitente.Post;
    fdEmitente.Next;
  end;
end;

procedure TFTitulosAPagarLiquidacao.dbListaCellClick(
  Column: TUniDBGridColumn);
var
sRespValid : string;
begin
  if Column.FieldName = 'FC_IMG_EDIT' then begin
    //ShowMessageN('EDITAR');
    if fdTitulosAReceberLista.IsEmpty then
      Exit;

    {rgMulta.ItemIndex := 0;
    rgJuros.ItemIndex := 0;
    rgDesconto.ItemIndex := 0;
    edtVlMulta.Enabled  := False;
    edtVlJuros.Enabled  := False;
    edtVlDescto.Enabled := False;}


    fdTitulosAReceberLista.Edit;

    edtPercDescto.OnExit(nil);
    edtPercMulta.OnExit(nil);
    edtPercJuros.OnExit(nil);

    rgMulta.OnClick(nil);
    rgJuros.OnClick(nil);
    rgDesconto.OnClick(nil);

    pCalcVlTit;

    tsManutTitAR.TabVisible     := True;
    tsDadosTitGeral.TabVisible  := False;
    pgManutTitAR.TabIndex       := 1;
    edtPercMulta.SetFocus;

  end;

end;

procedure TFTitulosAPagarLiquidacao.dbListaFieldImage(
  const Column: TUniDBGridColumn; const AField: TField; var OutImage: TGraphic;
  var DoNotDispose: Boolean; var ATransparent: TUniTransparentOption);
begin
  if SameText(AField.FieldName, 'FC_IMG_EDIT') then
  begin
    DoNotDispose := True;
    OutImage := imgEdit.Picture.Graphic;
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtPercDesctoExit(Sender: TObject);
begin
  if fdTitulosAReceberLista.State in [dsInsert,dsEdit] then begin
    if fdTitulosAReceberListaFC_IND_DESCONTO.AsInteger = 1 then begin
      fdTitulosAReceberListaFC_VL_DESCTO.AsFloat :=
      fdTitulosAReceberListavalorOriginal.AsFloat * (fdTitulosAReceberListapercDesctoAntecip.AsFloat / 100);
    end;
    pCalcVlTit;
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtPercJurosExit(Sender: TObject);
begin
  if fdTitulosAReceberLista.State in [dsInsert,dsEdit] then begin
    if fdTitulosAReceberListaFC_IND_JUROS.AsInteger = 1 then begin
      fdTitulosAReceberListaFC_VL_JUROS.AsFloat :=
      fdTitulosAReceberListavalorOriginal.AsFloat * (fdTitulosAReceberListapercJuroDia.AsFloat / 100);
    end;
    pCalcVlTit;
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtPercMultaExit(Sender: TObject);
begin
  if fdTitulosAReceberLista.State in [dsInsert,dsEdit] then begin
    if fdTitulosAReceberListaFC_IND_MULTA.AsInteger = 1 then begin
      fdTitulosAReceberListaFC_VL_MULTA.AsFloat :=
      fdTitulosAReceberListavalorOriginal.AsFloat * (fdTitulosAReceberListapercMultaAtraso.AsFloat / 100);
    end;
    pCalcVlTit;
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtPesqEmitRapChange(Sender: TObject);
begin
  if Trim(edtPesqEmitRap.Text) = '' then begin
    fdEmitente.Filtered  := False;
    fdEmitente.filter    := '';
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtPesqEmitRapKeyPress(
  Sender: TObject; var Key: Char);
begin
  if Trim(edtPesqEmitRap.Text) = '' then begin
    fdEmitente.Filtered  := False;
  end;
  if Key = #13 then begin
    fdEmitente.Filtered  := False;
    if Trim(edtPesqEmitRap.Text) <> '' then begin


      fdEmitente.Filter    := '    (upper(codEmitente)  like ' + QuotedStr('%' + AnsiUpperCase(edtPesqEmitRap.Text) + '%') + ') '
                                 + ' or (upper(nomeEmitente) like ' + QuotedStr('%' + AnsiUpperCase(edtPesqEmitRap.Text) + '%') + ') '
                                 + ' or (upper(cgc) like ' + QuotedStr('%' + AnsiUpperCase(edtPesqEmitRap.Text) + '%') + ') '
      ;


      fdEmitente.Filtered  := True;
    end;
  end;
end;

procedure TFTitulosAPagarLiquidacao.UniBitBtn1Click(Sender: TObject);
begin


  tsManut.TabVisible := False;
  tsLista.TabVisible := True;
  pgMenu.TabIndex := 0;
end;

procedure TFTitulosAPagarLiquidacao.btEfetivarClick(Sender: TObject);
begin
  if not fdTitulosAReceberLista.Locate('FC_SELEC',True,[loCaseInsensitive]) then begin
    MessageDlg('Selecione um ou mais Títulos para Liquidação!',mtError,[mbOK],nil);
    Exit;
  end;

  MessageDlg('Tem certeza que deseja Efetivar a Liquidação dos Títulos?',mtConfirmation,mbYesNo, pConfirmaEfetivacao);


end;

procedure TFTitulosAPagarLiquidacao.UniBitBtn3Click(Sender: TObject);
var
i:integer;
begin
  fdPortador.First;
  for I := 0 to fdPortador.RecordCount - 1 do begin
    fdPortador.Edit;
    fdPortadorFC_SELEC.AsBoolean := True;
    fdPortador.Post;
    fdPortador.Next;
  end;

end;

procedure TFTitulosAPagarLiquidacao.UniBitBtn4Click(Sender: TObject);
var
i:integer;
begin
  fdPortador.First;
  for I := 0 to fdPortador.RecordCount - 1 do begin
    fdPortador.Edit;
    fdPortadorFC_SELEC.AsBoolean := False;
    fdPortador.Post;
    fdPortador.Next;
  end;
end;

procedure TFTitulosAPagarLiquidacao.UniBitBtn5Click(Sender: TObject);
var
i:integer;
begin
  fdFormaPagto.First;
  for I := 0 to fdFormaPagto.RecordCount - 1 do begin
    fdFormaPagto.Edit;
    fdFormaPagtoFC_SELEC.AsBoolean := True;
    fdFormaPagto.Post;
    fdFormaPagto.Next;
  end;

end;

procedure TFTitulosAPagarLiquidacao.UniBitBtn6Click(Sender: TObject);
var
i:integer;
begin
  fdFormaPagto.First;
  for I := 0 to fdFormaPagto.RecordCount - 1 do begin
    fdFormaPagto.Edit;
    fdFormaPagtoFC_SELEC.AsBoolean := False;
    fdFormaPagto.Post;
    fdFormaPagto.Next;
  end;

end;

procedure TFTitulosAPagarLiquidacao.btMarcaTdsTitLiqClick(Sender: TObject);
var
i:integer;
begin
  fdTitulosAReceberLista.First;
  for I := 0 to fdTitulosAReceberLista.RecordCount - 1 do begin
    fdTitulosAReceberLista.Edit;
    fdTitulosAReceberListaFC_SELEC.AsBoolean := True;
    fdTitulosAReceberLista.Post;
    fdTitulosAReceberLista.Next;
  end;
end;

procedure TFTitulosAPagarLiquidacao.btDesmarcaTdsTitLiqClick(Sender: TObject);
var
i:integer;
begin
  fdTitulosAReceberLista.First;
  for I := 0 to fdTitulosAReceberLista.RecordCount - 1 do begin
    fdTitulosAReceberLista.Edit;
    fdTitulosAReceberListaFC_SELEC.AsBoolean := False;
    fdTitulosAReceberLista.Post;
    fdTitulosAReceberLista.Next;
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtPesqFormaPagRapChange(Sender: TObject);
begin
  if Trim(edtPesqFormaPagRap.Text) = '' then begin
    fdFormaPagto.Filtered  := False;
    fdFormaPagto.filter    := '';
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtPesqFormaPagRapKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Trim(edtPesqFormaPagRap.Text) = '' then begin
    fdFormaPagto.Filtered  := False;
  end;
  if Key = #13 then begin
    fdFormaPagto.Filtered  := False;
    if Trim(edtPesqFormaPagRap.Text) <> '' then begin

      fdFormaPagto.Filter    := '    (upper(codFormaPagto)  like ' + QuotedStr('%' + AnsiUpperCase(edtPesqFormaPagRap.Text) + '%') + ') '
                              + ' or (upper(nomeFormaPagto) like ' + QuotedStr('%' + AnsiUpperCase(edtPesqFormaPagRap.Text) + '%') + ') '
      ;

      fdFormaPagto.Filtered  := True;
    end;
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtPesqPortRapChange(Sender: TObject);
begin
  if Trim(edtPesqPortRap.Text) = '' then begin
    fdPortador.Filtered  := False;
    fdPortador.filter    := '';
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtPesqPortRapKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Trim(edtPesqPortRap.Text) = '' then begin
    fdPortador.Filtered  := False;
  end;
  if Key = #13 then begin
    fdPortador.Filtered  := False;
    if Trim(edtPesqPortRap.Text) <> '' then begin

      fdPortador.Filter    := '    (upper(codPortador)  like ' + QuotedStr('%' + AnsiUpperCase(edtPesqPortRap.Text) + '%') + ') '
                            + ' or (upper(nomePortador) like ' + QuotedStr('%' + AnsiUpperCase(edtPesqPortRap.Text) + '%') + ') '
      ;

      fdPortador.Filtered  := True;
    end;
  end;
end;

procedure TFTitulosAPagarLiquidacao.edtVlDesctoExit(Sender: TObject);
begin
  pCalcVlTit;
end;

procedure TFTitulosAPagarLiquidacao.edtVlJurosExit(Sender: TObject);
begin
  pCalcVlTit;
end;

procedure TFTitulosAPagarLiquidacao.edtVlMultaExit(Sender: TObject);
begin
  pCalcVlTit;
end;

procedure TFTitulosAPagarLiquidacao.pCalcTotalTitGeral;
var
i : integer;
begin

  fdTitulosAReceberLista.First;
  for I := 0 to fdTitulosAReceberLista.RecordCount - 1 do begin
    fdTitulosAReceberLista.Edit;
    fdTitulosAReceberListaFC_SELEC.AsBoolean := True;
    fdTitulosAReceberListaFC_IND_MULTA.AsInteger := 1;
    fdTitulosAReceberListaFC_IND_JUROS.AsInteger := 1;
    fdTitulosAReceberListaFC_IND_DESCONTO.AsInteger := 1;
    edtPercDescto.OnExit(nil);
    edtPercMulta.OnExit(nil);
    edtPercJuros.OnExit(nil);
    pCalcVlTit;
    fdTitulosAReceberLista.Post;
    fdTitulosAReceberLista.Next;
  end;

end;

procedure TFTitulosAPagarLiquidacao.pCalcVlTit;
begin
  if fdTitulosAReceberLista.State in [dsInsert,dsEdit] then begin
    fdTitulosAReceberListaFC_VL_TOTAL.AsFloat :=
    (fdTitulosAReceberListavalorOriginal.AsFloat +
     fdTitulosAReceberListaFC_VL_JUROS.AsFloat    +
     fdTitulosAReceberListaFC_VL_MULTA.AsFloat)   -
     fdTitulosAReceberListaFC_VL_DESCTO.AsFloat;
  end;
end;

procedure TFTitulosAPagarLiquidacao.pConfirmaAtualizacao(Sender: TComponent;
  AResult: Integer);
var
iSeq : integer;
begin
  if AResult = mrYes then begin

    try

      fdTitulosAReceberLista.Post;

      iSeq := 1;
      fqAuxiliar.Close;
      fqAuxiliar.SQL.Clear;
      fqAuxiliar.SQL.Add(   ' select max(sequencia) as seqReg from gcTitulosMovtoAReceber '
                          + ' where codEmpresa = ' + IntToStr(fdTitulosAReceberListacodEmpresa.AsInteger)
                          +  ' and codEstabel = ' + IntToStr(fdTitulosAReceberListacodEstabel.AsInteger)
                          +  ' and codTituloAReceber = ' + IntToStr(fdTitulosAReceberListacodTituloAReceber.AsInteger)
       );
      fqAuxiliar.Active := True;
      if not fqAuxiliar.IsEmpty then
        iSeq := fqAuxiliar.FieldByName('seqReg').AsInteger + 1;


      fdTitulosMovtoAReceber.Close;
      fdTitulosMovtoAReceber.SQL.Clear;
      fdTitulosMovtoAReceber.SQL.Add( ' select * from gcTitulosMovtoAReceber '
                                    + ' where codEmpresa = ' + IntToStr(fdTitulosAReceberListacodEmpresa.AsInteger)
                                    +  ' and codEstabel = ' + IntToStr(fdTitulosAReceberListacodEstabel.AsInteger)
                                    +  ' and codTituloAReceber = ' + IntToStr(fdTitulosAReceberListacodTituloAReceber.AsInteger));
      fdTitulosMovtoAReceber.Active := True;

      fdTitulosMovtoAReceber.Insert;
      fdTitulosMovtoARecebercodEmpresa.AsInteger        := fdTitulosAReceberListacodEmpresa.AsInteger;
      fdTitulosMovtoARecebercodEstabel.AsInteger        := fdTitulosAReceberListacodEstabel.AsInteger;
      fdTitulosMovtoARecebercodTituloAReceber.AsInteger := fdTitulosAReceberListacodTituloAReceber.AsInteger;
      fdTitulosMovtoARecebersequencia.AsInteger         := iSeq;
      fdTitulosMovtoARecebertipoMovto.AsInteger         := 2;
      fdTitulosMovtoAReceberdtMovto.AsDateTime          := Now;
      fdTitulosMovtoARecebercodUsuarMovto.AsString      := MainForm.sCodUsuario;
      fdTitulosMovtoARecebervalorMovto.AsFloat          := fdTitulosAReceberListavalorOriginal.AsFloat;
      fdTitulosMovtoAReceberdescHistorico.AsString      := 'Alteração Manual' ;
      fdTitulosMovtoAReceberdescricao.AsString          := 'Alteração';

      fdTitulosMovtoAReceber.Post;

      tsManutTitAR.TabVisible := False;
      tsDadosTitGeral.TabVisible := True;
      pgManutTitAR.TabIndex := 0;

    except
      on e : exception do begin
        MessageDlg('Erro ao gravar registro: ' + chr(10) + e.Message ,mtError,[mbOK],nil);
        Exit;
      end;
    end;

  end;
end;

procedure TFTitulosAPagarLiquidacao.pConfirmaEfetivacao(Sender: TComponent;
  AResult: Integer);
var
iSeq, i : integer;
begin
  if AResult = mrYes then begin
    try

      btEfetivar.ShowMask('Efetivando Títulos...Aguarde!');
      UniSession.Synchronize();

      try

        fdPortadLiq.Close;
        fdPortadLiq.SQL.Clear;
        fdPortadLiq.SQL.Add(  ' select * from gcPortador '
                            + ' where codEmpresa = ' + IntToStr(fdTitulosAReceberListacodEmpresa.AsInteger)
                            + '   and codEstabel = ' + IntToStr(fdTitulosAReceberListacodEstabel.AsInteger)  );
        fdPortadLiq.Active := True;


        fdTitulosAReceberLista.Filtered := False;
        fdTitulosAReceberLista.Filter := ' FC_SELEC = true ';
        fdTitulosAReceberLista.Filtered := True;

        fdTitulosAReceberLista.First;
        for I := 0 to fdTitulosAReceberLista.RecordCount - 1 do begin

          fdTitulosAReceberLista.Edit;
          fdTitulosAReceberListasituacao.AsInteger          := 9; //liquidado
          fdTitulosAReceberListadtLiquidacao.AsDateTime     := Now;
          fdTitulosAReceberListacodUsuarLiquid.AsString     := MainForm.sCodUsuario;
          fdTitulosAReceberListavalorDesconto.AsFloat       := fdTitulosAReceberListaFC_VL_DESCTO.AsFloat;
          fdTitulosAReceberListavalorJuros.AsFloat          := fdTitulosAReceberListaFC_VL_JUROS.AsFloat;
          fdTitulosAReceberListavalorMulta.AsFloat          := fdTitulosAReceberListaFC_VL_MULTA.AsFloat;
          fdTitulosAReceberListavalorTituloReceber.AsFloat  := fdTitulosAReceberListaFC_VL_TOTAL.AsFloat;
          fdTitulosAReceberLista.Post;

          if fdPortadLiq.Locate('codPortador',fdTitulosAReceberListacodPortador.AsInteger,[]) then begin
            fdPortadLiq.Edit;
            fdPortadLiqvlSaldoAtual.AsFloat := fdPortadLiqvlSaldoAtual.AsFloat +
                                               fdTitulosAReceberListavalorTituloReceber.AsFloat;
            fdPortadLiq.Post;
          end;

          iSeq := 1;
          fqAuxiliar.Close;
          fqAuxiliar.SQL.Clear;
          fqAuxiliar.SQL.Add(   ' select max(sequencia) as seqReg from gcTitulosMovtoAReceber '
                              + ' where codEmpresa = ' + IntToStr(fdTitulosAReceberListacodEmpresa.AsInteger)
                              +  ' and codEstabel = ' + IntToStr(fdTitulosAReceberListacodEstabel.AsInteger)
                              +  ' and codTituloAReceber = ' + IntToStr(fdTitulosAReceberListacodTituloAReceber.AsInteger)
           );
          fqAuxiliar.Active := True;
          if not fqAuxiliar.IsEmpty then
            iSeq := fqAuxiliar.FieldByName('seqReg').AsInteger + 1;


          fdTitulosMovtoAReceber.Close;
          fdTitulosMovtoAReceber.SQL.Clear;
          fdTitulosMovtoAReceber.SQL.Add( ' select * from gcTitulosMovtoAReceber '
                                        + ' where codEmpresa = ' + IntToStr(fdTitulosAReceberListacodEmpresa.AsInteger)
                                        +  ' and codEstabel = ' + IntToStr(fdTitulosAReceberListacodEstabel.AsInteger)
                                        +  ' and codTituloAReceber = ' + IntToStr(fdTitulosAReceberListacodTituloAReceber.AsInteger));
          fdTitulosMovtoAReceber.Active := True;

          fdTitulosMovtoAReceber.Insert;
          fdTitulosMovtoARecebercodEmpresa.AsInteger        := fdTitulosAReceberListacodEmpresa.AsInteger;
          fdTitulosMovtoARecebercodEstabel.AsInteger        := fdTitulosAReceberListacodEstabel.AsInteger;
          fdTitulosMovtoARecebercodTituloAReceber.AsInteger := fdTitulosAReceberListacodTituloAReceber.AsInteger;
          fdTitulosMovtoARecebersequencia.AsInteger         := iSeq;
          fdTitulosMovtoARecebertipoMovto.AsInteger         := 2;
          fdTitulosMovtoAReceberdtMovto.AsDateTime          := Now;
          fdTitulosMovtoARecebercodUsuarMovto.AsString      := MainForm.sCodUsuario;
          fdTitulosMovtoARecebervalorMovto.AsFloat          := fdTitulosAReceberListavalorTituloReceber.AsFloat;
          fdTitulosMovtoAReceberdescHistorico.AsString      := 'Liquidação' ;
          fdTitulosMovtoAReceberdescricao.AsString          := 'Liquidação';
          fdTitulosMovtoAReceber.Post;


          fdTitulosAReceberLista.Next;
        end;

        tsManut.TabVisible := False;
        tsLista.TabVisible := True;
        pgMenu.TabIndex := 0;

      except
        on e : exception do begin
          MessageDlg('Erro ao efetivar registros: ' + chr(10) + e.Message ,mtError,[mbOK],nil);
          Exit;
        end;
      end;

    finally
      btEfetivar.HideMask;
      UniSession.Synchronize();
    end;
  end;
end;

procedure TFTitulosAPagarLiquidacao.rgDescontoClick(Sender: TObject);
begin
  if rgDesconto.ItemIndex = 0 then begin
    edtVlDescto.Enabled  := False;
    edtPercDescto.Enabled  := True;
  end
  else begin
    edtVlDescto.Enabled  := True;
    edtPercDescto.Enabled  := False;
  end;
  pCalcVlTit;
end;

procedure TFTitulosAPagarLiquidacao.rgJurosClick(Sender: TObject);
begin
  if rgJuros.ItemIndex = 0 then begin
    edtVlJuros.Enabled  := False;
    edtPercJuros.Enabled  := True;
  end
  else begin
    edtVlJuros.Enabled  := True;
    edtPercJuros.Enabled  := False;
  end;
  pCalcVlTit;
end;

procedure TFTitulosAPagarLiquidacao.rgMultaClick(Sender: TObject);
begin
  if rgMulta.ItemIndex = 0 then begin
    edtVlMulta.Enabled  := False;
    edtPercMulta.Enabled  := True;
  end
  else begin
    edtVlMulta.Enabled  := True;
    edtPercMulta.Enabled  := False;
  end;
  pCalcVlTit;
end;

procedure TFTitulosAPagarLiquidacao.UniFrameCreate(Sender: TObject);
begin

  fdPortador.Close;
  fdPortador.SQL.Clear;
  fdPortador.SQL.Add( ' select * from gcPortador '
                     + ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa)
                     + '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel));
  fdPortador.Active := True;

  fdFormaPagto.Close;
  fdFormaPagto.SQL.Clear;
  fdFormaPagto.SQL.Add( ' select * from gcFormaPagamento '
                     + ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa)
                     + '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel));
  fdFormaPagto.Active := True;

  fdEmitente.Close;
  fdEmitente.SQL.Clear;
  fdEmitente.SQL.Add( ' select * from gcEmitente '
                     + ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa)
                     + '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel));
  fdEmitente.Active := True;

  dtImplantIni.DateTime := Date - 90;
  dtImplantFim.DateTime := Date;
  dtVenctoIni.DateTime := Date - 180;
  dtVenctoFim.DateTime := Date + 365;

  tsDadosTitGeral.TabVisible := True;
  tsManutTitAR.TabVisible := False;
  pgManutTitAR.TabIndex := 0;

  tsLista.TabVisible := True;
  tsManut.TabVisible := False;
  pgMenu.TabIndex := 0;


end;

initialization
  RegisterClass(TFTitulosAPagarLiquidacao);


end.
