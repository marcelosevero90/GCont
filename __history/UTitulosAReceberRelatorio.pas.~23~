unit UTitulosAReceberRelatorio;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIFrame, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, uniGUIBaseClasses, uniImageList,
  Vcl.Imaging.pngimage, uniImage, uniEdit, uniPanel, uniBasicGrid, uniDBGrid,
  uniDateTimePicker, uniLabel, uniGroupBox, uniButton, uniBitBtn, uniToolBar,
  uniPageControl, uniCheckBox;

type
  TFTitulosAReceberRelatorio = class(TUniFrame)
    pgMenu: TUniPageControl;
    tsLista: TUniTabSheet;
    UniToolBar1: TUniToolBar;
    btAtualizarDados: TUniBitBtn;
    UniGroupBox1: TUniGroupBox;
    UniLabel2: TUniLabel;
    dtImplantIni: TUniDateTimePicker;
    dtImplantFim: TUniDateTimePicker;
    UniLabel1: TUniLabel;
    dtVenctoIni: TUniDateTimePicker;
    dtVenctoFim: TUniDateTimePicker;
    UniGroupBox2: TUniGroupBox;
    dbEmitFiltro: TUniDBGrid;
    UniPanel5: TUniPanel;
    btMarcaTdsEmit: TUniBitBtn;
    btDesmarcaTdsEmit: TUniBitBtn;
    edtPesqEmitRap: TUniEdit;
    UniGroupBox3: TUniGroupBox;
    UniPanel6: TUniPanel;
    UniBitBtn3: TUniBitBtn;
    UniBitBtn4: TUniBitBtn;
    edtPesqPortRap: TUniEdit;
    dbPortadFiltro: TUniDBGrid;
    UniGroupBox4: TUniGroupBox;
    UniPanel7: TUniPanel;
    UniBitBtn5: TUniBitBtn;
    UniBitBtn6: TUniBitBtn;
    edtPesqFormaPagRap: TUniEdit;
    UniDBGrid1: TUniDBGrid;
    UniLabel5: TUniLabel;
    edtOSIniFiltro: TUniNumberEdit;
    edtOSFimFiltro: TUniNumberEdit;
    UniPanel1: TUniPanel;
    UniPanel2: TUniPanel;
    UniPanel3: TUniPanel;
    imgVis: TUniImage;
    imgEdit: TUniImage;
    imgCancel: TUniImage;
    tsManut: TUniTabSheet;
    UniNativeImageList1: TUniNativeImageList;
    fdFormaPagto: TFDQuery;
    fdFormaPagtocodEmpresa: TIntegerField;
    fdFormaPagtocodEstabel: TIntegerField;
    fdFormaPagtocodFormaPagto: TIntegerField;
    fdFormaPagtoFC_SELEC: TBooleanField;
    fdFormaPagtonomeFormaPagto: TStringField;
    dsFormaPagto: TDataSource;
    fdEmitente: TFDQuery;
    fdEmitentecodEmpresa: TIntegerField;
    fdEmitentecodEstabel: TIntegerField;
    fdEmitentecodEmitente: TIntegerField;
    fdEmitentenomeEmitente: TStringField;
    fdEmitentecgc: TStringField;
    fdEmitentesituacao: TIntegerField;
    fdEmitenteidentificacao: TIntegerField;
    fdEmitenteemail: TStringField;
    fdEmitentetelefone: TStringField;
    fdEmitentecelular: TStringField;
    fdEmitentedataImplantacao: TDateField;
    fdEmitenteFC_SELEC: TBooleanField;
    dsEmitente: TDataSource;
    fdPortador: TFDQuery;
    fdPortadorcodEmpresa: TIntegerField;
    fdPortadorcodEstabel: TIntegerField;
    fdPortadorcodPortador: TIntegerField;
    fdPortadornomePortador: TStringField;
    fdPortadorcodBanco: TIntegerField;
    fdPortadoragencia: TStringField;
    fdPortadorcontaCorrente: TStringField;
    fdPortadortipoPortador: TIntegerField;
    fdPortadorvlSaldoInicial: TBCDField;
    fdPortadorvlSaldoAtual: TBCDField;
    fdPortadorFC_SELEC: TBooleanField;
    fdPortadorpercMultaAtraso: TBCDField;
    fdPortadorpercJuroDia: TBCDField;
    fdPortadorpercDesctoAntecip: TBCDField;
    dsPortador: TDataSource;
    fdTitulosAReceberLista: TFDQuery;
    fdTitulosAReceberListacodEmpresa: TIntegerField;
    fdTitulosAReceberListacodEstabel: TIntegerField;
    fdTitulosAReceberListacodTituloAReceber: TIntegerField;
    fdTitulosAReceberListadescricao: TStringField;
    fdTitulosAReceberListacodEmitente: TIntegerField;
    fdTitulosAReceberListacodFormaPagto: TIntegerField;
    fdTitulosAReceberListasituacao: TIntegerField;
    fdTitulosAReceberListadtVencimento: TDateField;
    fdTitulosAReceberListadtEmissao: TDateField;
    fdTitulosAReceberListadtTransacao: TDateField;
    fdTitulosAReceberListacodUsuarImplant: TStringField;
    fdTitulosAReceberListaobservacao: TStringField;
    fdTitulosAReceberListavalorOriginal: TBCDField;
    fdTitulosAReceberListavalorTituloReceber: TBCDField;
    fdTitulosAReceberListavalorDesconto: TBCDField;
    fdTitulosAReceberListavalorJuros: TBCDField;
    fdTitulosAReceberListavalorMulta: TBCDField;
    fdTitulosAReceberListacodPortador: TIntegerField;
    fdTitulosAReceberListadoctoReferencia: TStringField;
    fdTitulosAReceberListaindOrigem: TIntegerField;
    fdTitulosAReceberListacodOrdemServico: TIntegerField;
    fdTitulosAReceberListacodUsuarLiquid: TStringField;
    fdTitulosAReceberListadtCancelamento: TDateField;
    fdTitulosAReceberListadtLiquidacao: TDateField;
    fdTitulosAReceberListacodUsuarCancela: TStringField;
    fdTitulosAReceberListaparcela: TIntegerField;
    fdTitulosAReceberListapercMultaAtraso: TBCDField;
    fdTitulosAReceberListapercJuroDia: TBCDField;
    fdTitulosAReceberListapercDesctoAntecip: TBCDField;
    fdTitulosAReceberListamotivoCancela: TStringField;
    fdTitulosAReceberListanomeEmitente: TStringField;
    fdTitulosAReceberListanomeFormaPagto: TStringField;
    fdTitulosAReceberListanomePortador: TStringField;
    dsTitulosAReceberLista: TDataSource;
    fdTitulosMovtoAReceber: TFDQuery;
    fdTitulosMovtoARecebercodEmpresa: TIntegerField;
    fdTitulosMovtoARecebercodEstabel: TIntegerField;
    fdTitulosMovtoARecebercodTituloAReceber: TIntegerField;
    fdTitulosMovtoARecebersequencia: TIntegerField;
    fdTitulosMovtoARecebertipoMovto: TIntegerField;
    fdTitulosMovtoAReceberdescricao: TStringField;
    fdTitulosMovtoAReceberdtMovto: TDateField;
    fdTitulosMovtoARecebercodUsuarMovto: TStringField;
    fdTitulosMovtoARecebervalorMovto: TBCDField;
    fdTitulosMovtoAReceberdescHistorico: TStringField;
    dsTitulosMovtoAReceber: TDataSource;
    fqAuxiliar: TFDQuery;
    fdPortadLiq: TFDQuery;
    fdPortadLiqcodEmpresa: TIntegerField;
    fdPortadLiqcodEstabel: TIntegerField;
    fdPortadLiqcodPortador: TIntegerField;
    fdPortadLiqnomePortador: TStringField;
    fdPortadLiqcodBanco: TIntegerField;
    fdPortadLiqagencia: TStringField;
    fdPortadLiqcontaCorrente: TStringField;
    fdPortadLiqtipoPortador: TIntegerField;
    fdPortadLiqvlSaldoInicial: TBCDField;
    fdPortadLiqvlSaldoAtual: TBCDField;
    fdPortadLiqpercMultaAtraso: TBCDField;
    fdPortadLiqpercJuroDia: TBCDField;
    fdPortadLiqpercDesctoAntecip: TBCDField;
    gbSit: TUniGroupBox;
    cbAberta: TUniCheckBox;
    cbCancelada: TUniCheckBox;
    cbLiquid: TUniCheckBox;
    fdTitulosAReceberListadscSit: TStringField;
    procedure btAtualizarDadosClick(Sender: TObject);
    procedure UniFrameCreate(Sender: TObject);
    procedure btMarcaTdsEmitClick(Sender: TObject);
    procedure btDesmarcaTdsEmitClick(Sender: TObject);
    procedure UniBitBtn3Click(Sender: TObject);
    procedure UniBitBtn4Click(Sender: TObject);
    procedure UniBitBtn5Click(Sender: TObject);
    procedure UniBitBtn6Click(Sender: TObject);
    procedure edtPesqEmitRapKeyPress(Sender: TObject; var Key: Char);
    procedure edtPesqPortRapKeyPress(Sender: TObject; var Key: Char);
    procedure edtPesqFormaPagRapKeyPress(Sender: TObject; var Key: Char);
    procedure edtPesqEmitRapChange(Sender: TObject);
    procedure edtPesqPortRapChange(Sender: TObject);
    procedure edtPesqFormaPagRapChange(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

implementation

{$R *.dfm}

uses Main, MainModule, ServerModule;

const SQLTitAcrAP = 'select gcTitulosAPagar.*, ' +
' case ' +
' when gcTitulosAPagar.situacao = 1 then ''Aberta''   ' +
' when gcTitulosAPagar.situacao = 2 then ''Cancelada'' ' +
' when gcTitulosAPagar.situacao = 3 then ''Liquidada'' ' +
' else '''' end as dscSit, ' +
' gcEmitente.nomeEmitente, '               +
' gcFormaPagamento.nomeFormaPagto, '         +
' gcPortador.nomePortador '                    +
' from gcTitulosAPagar '                       +
' inner join gcEmitente on '                       +
' (gcEmitente.codEmpresa = gcTitulosAPagar.codEmpresa '  +
' and '                                                      +
' gcEmitente.codEstabel = gcTitulosAPagar.codEstabel and '   +
' gcEmitente.codEmitente = gcTitulosAPagar.codEmitente) '    +
' left outer join gcFormaPagamento on '                          +
' (gcFormaPagamento.codEmpresa = gcTitulosAPagar.codEmpresa and  '  +
' gcFormaPagamento.codEstabel = gcTitulosAPagar.codEstabel and '  +
' gcFormaPagamento.codFormaPagto = gcTitulosAPagar.codFormaPagto) ' +
' inner join gcPortador on '                                           +
' (gcPortador.codEmpresa = gcTitulosAPagar.codEmpresa and  '  +
' gcPortador.codEstabel = gcTitulosAPagar.codEstabel and '  +
' gcPortador.codPortador = gcTitulosAPagar.codPortador) ';



procedure TFTitulosAReceberRelatorio.btAtualizarDadosClick(Sender: TObject);
var
sEmits, sPortads, sFormasPags, SqlExec, sSit : string;
sTab, sSQL, sCod, sDesc, sTpCod, sValLinha : string;
i,j : integer;
sLinha : string;
slArquivoCSV : TStringList;
sArqCSV, sNomeAux, sRet : string;
begin
  if not fdEmitente.Locate('FC_SELEC',True,[loCaseInsensitive]) then begin
    MessageDlg('Selecione um ou mais Cliente para Liquidação!',mtError,[mbOK],nil);
    Exit;
  end;
  if not fdPortador.Locate('FC_SELEC',True,[loCaseInsensitive]) then begin
    MessageDlg('Selecione um ou mais Portadores!',mtError,[mbOK],nil);
    Exit;
  end;
  if not fdFormaPagto.Locate('FC_SELEC',True,[loCaseInsensitive]) then begin
    MessageDlg('Selecione uma ou mais Formas Pagto!',mtError,[mbOK],nil);
    Exit;
  end;
  if (cbAberta.Checked = False) and (cbCancelada.Checked = False) and (cbLiquid.Checked = False) then begin
    MessageDlg('Selecione uma ou mais Situações!',mtError,[mbOK],nil);
    Exit;
  end;


  edtPesqEmitRap.Clear;
  edtPesqPortRap.Clear;
  edtPesqFormaPagRap.Clear;

  sEmits        := '';
  sPortads      := '';
  sFormasPags   := '';
  sSit          := '';

  fdEmitente.Filtered := False;
  fdEmitente.Filter   := ' FC_SELEC = true ';
  fdEmitente.Filtered := True;

  fdPortador.Filtered := False;
  fdPortador.Filter   := ' FC_SELEC = true ';
  fdPortador.Filtered := True;

  fdFormaPagto.Filtered := False;
  fdFormaPagto.Filter   := ' FC_SELEC = true ';
  fdFormaPagto.Filtered := True;

  if cbAberta.Checked then
    sSit := sSit + '1,';
  if cbCancelada.Checked then
    sSit := sSit + '2,';
  if cbLiquid.Checked then
    sSit := sSit + '9,';

  fdEmitente.First;
  for I := 0 to fdEmitente.RecordCount - 1 do begin
    sEmits := sEmits + IntToStr(fdEmitentecodEmitente.AsInteger) + ',';
    fdEmitente.Next;
  end;
  fdPortador.First;
  for I := 0 to fdPortador.RecordCount - 1 do begin
    sPortads := sPortads + IntToStr(fdPortadorcodPortador.AsInteger) + ',';
    fdPortador.Next;
  end;
  fdFormaPagto.First;
  for I := 0 to fdFormaPagto.RecordCount - 1 do begin
    sFormasPags := sFormasPags + IntToStr(fdFormaPagtocodFormaPagto.AsInteger) + ',';
    fdFormaPagto.Next;
  end;

  sEmits        := Trim(sEmits);
  sPortads      := Trim(sPortads);
  sFormasPags   := Trim(sFormasPags);
  sSit          := Trim(sSit);

  if sEmits <> '' then begin
    sEmits := Copy(sEmits,1,length(sEmits)- 1);
  end;
  if sPortads <> '' then begin
    sPortads := Copy(sPortads,1,length(sPortads)- 1);
  end;
  if sFormasPags <> '' then begin
    sFormasPags := Copy(sFormasPags,1,length(sFormasPags)- 1);
  end;
  if sSit <> '' then begin
    sSit := Copy(sSit,1,length(sSit)- 1);
  end;

  SqlExec := SQLTitAcrAR
          + ' where gcTitulosAReceber.codEmpresa    = ' + IntToStr(MainForm.iCodEmpresa)
          + '   and gcTitulosAReceber.codEstabel    = ' + IntToStr(MainForm.iCodEstabel)
          + '   and gcTitulosAReceber.dtVencimento >= ' + QuotedStr(FormatDateTime('yyyy-mm-dd',dtVenctoIni.DateTime))
          + '   and gcTitulosAReceber.dtVencimento <= ' + QuotedStr(FormatDateTime('yyyy-mm-dd',dtVenctoFim.DateTime))
          + '   and gcTitulosAReceber.dtEmissao    >= ' + QuotedStr(FormatDateTime('yyyy-mm-dd',dtImplantIni.DateTime))
          + '   and gcTitulosAReceber.dtEmissao    <= ' + QuotedStr(FormatDateTime('yyyy-mm-dd',dtImplantFim.DateTime))
          + '   and ((gcTitulosAReceber.codOrdemServico >= ' + IntToStr(Trunc(edtOSIniFiltro.Value))
          + '   and   gcTitulosAReceber.codOrdemServico <= ' + IntToStr(Trunc(edtOSFimFiltro.Value)) + ') or gcTitulosAReceber.codOrdemServico is null) ' ;

  if sEmits <> '' then begin
    SqlExec := SqlExec + ' and gcTitulosAReceber.codEmitente in (' + sEmits + ')';
  end;
  if sPortads <> '' then begin
    SqlExec := SqlExec + ' and gcTitulosAReceber.codPortador in (' + sPortads + ')';
  end;
  if sFormasPags <> '' then begin
    SqlExec := SqlExec + ' and gcTitulosAReceber.codFormaPagto in (' + sFormasPags + ')';
  end;
  if sSit <> '' then begin
    SqlExec := SqlExec + ' and gcTitulosAReceber.situacao in (' + sSit + ')';
  end;


  fdTitulosAReceberLista.Close;
  fdTitulosAReceberLista.SQL.Clear;
  fdTitulosAReceberLista.SQL.Add(SqlExec);
  fdTitulosAReceberLista.Active := True;


  fdEmitente.Filtered := False;
  fdPortador.Filtered := False;
  fdFormaPagto.Filtered := False;

  if fdTitulosAReceberLista.IsEmpty then begin
    fdTitulosAReceberLista.Close;
    MessageDlg('Nenhum registro de Título encontrado para a seleção informada!',mtError,[mbOK],nil);
    Exit;
  end;

  try

      slArquivoCSV := TStringList.Create;

      sLinha := '';
      for I := 0 to fdTitulosAReceberLista.Fields.Count - 1 do begin
        if fdTitulosAReceberLista.Fields[i].FieldKind = fkInternalCalc then
          Continue;
        sLinha := sLinha + fdTitulosAReceberLista.Fields[i].DisplayLabel + ';';
      end;

      slArquivoCSV.Add(sLinha);

      fdTitulosAReceberLista.First;
      for I := 0 to fdTitulosAReceberLista.RecordCount - 1 do begin
        sLinha := '';
        for j := 0 to fdTitulosAReceberLista.Fields.Count - 1 do begin
          if fdTitulosAReceberLista.Fields[j].FieldKind = fkInternalCalc then
            Continue;

          sValLinha := StringReplace(fdTitulosAReceberLista.FieldByName(fdTitulosAReceberLista.Fields[j].FieldName).AsString,
                                     chr(10),' ',[rfReplaceAll,rfIgnoreCase]);
          sValLinha := StringReplace(sValLinha,chr(13),' ',[rfReplaceAll,rfIgnoreCase]);
          sValLinha := StringReplace(sValLinha,#13,' ',[rfReplaceAll,rfIgnoreCase]);

          sLinha := sLinha + sValLinha + ';';

        end;
        slArquivoCSV.Add(sLinha);
        fdTitulosAReceberLista.Next;
      end;

      try

        Randomize;
        repeat
          sArqCSV   := UniServerModule.FilesFolderPath ;
          sNomeAux  := IntToStr(MainForm.iCodEmpresa) + '_' + 'TitulosAR' + '_'  +
                       StringReplace(FormatDateTime('dd/mm/yyyy',Now),'/','',[rfReplaceAll]) + '_' +
                       IntToStr(Random(9999)) + '_' +
                       IntToStr(Random(9999)) + '_' +
                       IntToStr(Random(9999)) + '_' +
                       IntToStr(Random(9999)) + '_' +
                       IntToStr(Random(9999)) + '_' +
                       IntToStr(Random(9999)) + '_' +
                       IntToStr(Random(9999)) + '_' +
                       IntToStr(Random(9999)) + '_' +
                       IntToStr(Random(9999)) + '.csv';

          sArqCSV := sArqCSV + sNomeAux;
          if not FileExists(sArqCSV) then
            Break;
        until (not FileExists(sArqCSV));

        slArquivoCSV.SaveToFile(sArqCSV);

        UniSession.SendFile(sArqCSV);
      except
        on e : exception do begin
          MessageDlg('Erro ao imprimir registros: ' + chr(10) + e.Message ,mtError,[mbOK],nil);
          Exit;
        end;
      end;

    finally
      FreeAndNil(slArquivoCSV);
    end;


end;

procedure TFTitulosAReceberRelatorio.btDesmarcaTdsEmitClick(Sender: TObject);
var
i:integer;
begin
  fdEmitente.First;
  for I := 0 to fdEmitente.RecordCount - 1 do begin
    fdEmitente.Edit;
    fdEmitenteFC_SELEC.AsBoolean := False;
    fdEmitente.Post;
    fdEmitente.Next;
  end;

end;

procedure TFTitulosAReceberRelatorio.btMarcaTdsEmitClick(Sender: TObject);
var
i:integer;
begin
  fdEmitente.First;
  for I := 0 to fdEmitente.RecordCount - 1 do begin
    fdEmitente.Edit;
    fdEmitenteFC_SELEC.AsBoolean := True;
    fdEmitente.Post;
    fdEmitente.Next;
  end;

end;

procedure TFTitulosAReceberRelatorio.edtPesqEmitRapChange(Sender: TObject);
begin
  if Trim(edtPesqEmitRap.Text) = '' then begin
    fdEmitente.Filtered  := False;
    fdEmitente.filter    := '';
  end;
end;

procedure TFTitulosAReceberRelatorio.edtPesqEmitRapKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Trim(edtPesqEmitRap.Text) = '' then begin
    fdEmitente.Filtered  := False;
  end;
  if Key = #13 then begin
    fdEmitente.Filtered  := False;
    if Trim(edtPesqEmitRap.Text) <> '' then begin


      fdEmitente.Filter    := '    (upper(codEmitente)  like ' + QuotedStr('%' + AnsiUpperCase(edtPesqEmitRap.Text) + '%') + ') '
                                 + ' or (upper(nomeEmitente) like ' + QuotedStr('%' + AnsiUpperCase(edtPesqEmitRap.Text) + '%') + ') '
                                 + ' or (upper(cgc) like ' + QuotedStr('%' + AnsiUpperCase(edtPesqEmitRap.Text) + '%') + ') '
      ;


      fdEmitente.Filtered  := True;
    end;
  end;
end;

procedure TFTitulosAReceberRelatorio.edtPesqFormaPagRapChange(Sender: TObject);
begin
  if Trim(edtPesqFormaPagRap.Text) = '' then begin
    fdFormaPagto.Filtered  := False;
    fdFormaPagto.filter    := '';
  end;
end;

procedure TFTitulosAReceberRelatorio.edtPesqFormaPagRapKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Trim(edtPesqFormaPagRap.Text) = '' then begin
    fdFormaPagto.Filtered  := False;
  end;
  if Key = #13 then begin
    fdFormaPagto.Filtered  := False;
    if Trim(edtPesqFormaPagRap.Text) <> '' then begin

      fdFormaPagto.Filter    := '    (upper(codFormaPagto)  like ' + QuotedStr('%' + AnsiUpperCase(edtPesqFormaPagRap.Text) + '%') + ') '
                              + ' or (upper(nomeFormaPagto) like ' + QuotedStr('%' + AnsiUpperCase(edtPesqFormaPagRap.Text) + '%') + ') '
      ;

      fdFormaPagto.Filtered  := True;
    end;
  end;
end;

procedure TFTitulosAReceberRelatorio.edtPesqPortRapChange(Sender: TObject);
begin
  if Trim(edtPesqPortRap.Text) = '' then begin
    fdPortador.Filtered  := False;
    fdPortador.filter    := '';
  end;
end;

procedure TFTitulosAReceberRelatorio.edtPesqPortRapKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Trim(edtPesqPortRap.Text) = '' then begin
    fdPortador.Filtered  := False;
  end;
  if Key = #13 then begin
    fdPortador.Filtered  := False;
    if Trim(edtPesqPortRap.Text) <> '' then begin

      fdPortador.Filter    := '    (upper(codPortador)  like ' + QuotedStr('%' + AnsiUpperCase(edtPesqPortRap.Text) + '%') + ') '
                            + ' or (upper(nomePortador) like ' + QuotedStr('%' + AnsiUpperCase(edtPesqPortRap.Text) + '%') + ') '
      ;

      fdPortador.Filtered  := True;
    end;
  end;
end;

procedure TFTitulosAReceberRelatorio.UniBitBtn3Click(Sender: TObject);
var
i:integer;
begin
  fdPortador.First;
  for I := 0 to fdPortador.RecordCount - 1 do begin
    fdPortador.Edit;
    fdPortadorFC_SELEC.AsBoolean := True;
    fdPortador.Post;
    fdPortador.Next;
  end;

end;

procedure TFTitulosAReceberRelatorio.UniBitBtn4Click(Sender: TObject);
var
i:integer;
begin
  fdPortador.First;
  for I := 0 to fdPortador.RecordCount - 1 do begin
    fdPortador.Edit;
    fdPortadorFC_SELEC.AsBoolean := False;
    fdPortador.Post;
    fdPortador.Next;
  end;

end;

procedure TFTitulosAReceberRelatorio.UniBitBtn5Click(Sender: TObject);
var
i:integer;
begin
  fdFormaPagto.First;
  for I := 0 to fdFormaPagto.RecordCount - 1 do begin
    fdFormaPagto.Edit;
    fdFormaPagtoFC_SELEC.AsBoolean := True;
    fdFormaPagto.Post;
    fdFormaPagto.Next;
  end;

end;

procedure TFTitulosAReceberRelatorio.UniBitBtn6Click(Sender: TObject);
var
i:integer;
begin
  fdFormaPagto.First;
  for I := 0 to fdFormaPagto.RecordCount - 1 do begin
    fdFormaPagto.Edit;
    fdFormaPagtoFC_SELEC.AsBoolean := False;
    fdFormaPagto.Post;
    fdFormaPagto.Next;
  end;

end;

procedure TFTitulosAReceberRelatorio.UniFrameCreate(Sender: TObject);
begin

  fdPortador.Close;
  fdPortador.SQL.Clear;
  fdPortador.SQL.Add( ' select * from gcPortador '
                     + ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa)
                     + '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel));
  fdPortador.Active := True;

  fdFormaPagto.Close;
  fdFormaPagto.SQL.Clear;
  fdFormaPagto.SQL.Add( ' select * from gcFormaPagamento '
                     + ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa)
                     + '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel));
  fdFormaPagto.Active := True;

  fdEmitente.Close;
  fdEmitente.SQL.Clear;
  fdEmitente.SQL.Add( ' select * from gcEmitente '
                     + ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa)
                     + '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel));
  fdEmitente.Active := True;

  dtImplantIni.DateTime := Date - 90;
  dtImplantFim.DateTime := Date;
  dtVenctoIni.DateTime := Date - 180;
  dtVenctoFim.DateTime := Date + 365;

  tsLista.TabVisible := True;
  tsManut.TabVisible := False;
  pgMenu.TabIndex := 0;
end;

initialization
  RegisterClass(TFTitulosAReceberRelatorio);


end.
