unit URelatoriosGeraisSistema;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIFrame, uniLabel, uniGUIBaseClasses, uniImageList,
  uniPanel, uniMultiItem, uniComboBox, uniGroupBox, uniButton, uniBitBtn,
  uniToolBar, uniPageControl, uniEdit, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TFRelatoriosGeraisSistema = class(TUniFrame)
    pgMenu: TUniPageControl;
    tsLista: TUniTabSheet;
    UniToolBar1: TUniToolBar;
    UniToolButton3: TUniToolButton;
    UniToolButton1: TUniToolButton;
    btAtualizarDados: TUniBitBtn;
    UniGroupBox1: TUniGroupBox;
    cbCadFiltro: TUniComboBox;
    UniPanel1: TUniPanel;
    UniPanel2: TUniPanel;
    UniPanel3: TUniPanel;
    tsManut: TUniTabSheet;
    UniNativeImageList1: TUniNativeImageList;
    UniLabel1: TUniLabel;
    UniLabel2: TUniLabel;
    UniLabel3: TUniLabel;
    UniLabel4: TUniLabel;
    edtCodIniFiltro: TUniNumberEdit;
    edtCodFimFiltro: TUniNumberEdit;
    edtCodItemIniFiltro: TUniEdit;
    edtCodItemFimFiltro: TUniEdit;
    edtDescFimFiltro: TUniEdit;
    edtDescIniFiltro: TUniEdit;
    fdRelatorio: TFDQuery;
    procedure btAtualizarDadosClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

implementation

{$R *.dfm}

uses Main, MainModule, ServerModule;



procedure TFRelatoriosGeraisSistema.btAtualizarDadosClick(Sender: TObject);
var
sTab, sSQL, sCod, sDesc, sTpCod : string;
i,j : integer;
sLinha : string;
slArquivoCSV : TStringList;
sArqCSV, sNomeAux, sRet : string;
begin

  sTab   := '';
  sCod   := '';
  sDesc  := '';
  sTpCod := '';
  case cbCadFiltro.ItemIndex  of
    0:begin sTab := 'gcEmitente'; sCod:='codEmitente'; sDesc:='nomeEmitente'; sTpCod:='int'; end;

  end;

  sSQL := ' select * from  ' + sTab
        + ' where codEmpresa = '    + IntToStr(MainForm.iCodEmpresa)
        + '   and codEstabel = '    + IntToStr(MainForm.iCodEstabel);

  if sTpCod = 'int' then begin
      sSQL := sSQL
        + ' and ' + sCod + ' >= '   + IntToStr(Trunc(edtCodIniFiltro.Value))
        + ' and ' + sCod + ' <= '   + IntToStr(Trunc(edtCodFimFiltro.Value))
      ;
  end
  else begin
      sSQL := sSQL
        + ' and ' + sCod + ' >= '   + QuotedStr(edtCodItemIniFiltro.Text)
        + ' and ' + sCod + ' <= '   + QuotedStr(edtCodItemFimFiltro.Text)
      ;
  end;

  sSQL := sSQL
    + ' and ' + sDesc + ' >= '   + QuotedStr(edtDescIniFiltro.Text)
    + ' and ' + sDesc + ' <= '   + QuotedStr(edtDescFimFiltro.Text) ;

  try

    slArquivoCSV := TStringList.Create;

    fdRelatorio.Close;
    fdRelatorio.SQL.Clear;
    fdRelatorio.SQL.Add(sSQL);
    fdRelatorio.Active := True;

    sLinha := '';
    for I := 0 to fdRelatorio.Fields.Count - 1 do begin
      if fdRelatorio.Fields[i].FieldKind = fkInternalCalc then
        Continue;
      sLinha := sLinha + fdRelatorio.Fields[i].DisplayLabel + ';';
    end;

    slArquivoCSV.Add(sLinha);

    fdRelatorio.First;
    for I := 0 to fdRelatorio.RecordCount - 1 do begin
      sLinha := '';
      for j := 0 to fdRelatorio.Fields.Count - 1 do begin
        if fdRelatorio.Fields[j].FieldKind = fkInternalCalc then
          Continue;
        sLinha := sLinha + fdRelatorio.FieldByName(fdRelatorio.Fields[j].FieldName).AsString + ';';
      end;
      slArquivoCSV.Add(sLinha);
      fdRelatorio.Next;
    end;

    try

      Randomize;
      repeat
        sArqCSV   := UniServerModule.FilesFolderPath ;
        sNomeAux  := IntToStr(MainForm.iCodEmpresa) + '_Portador_' +
                     StringReplace(FormatDateTime('dd/mm/yyyy',Now),'/','',[rfReplaceAll]) + '_' +
                     IntToStr(Random(9999)) + '_' +
                     IntToStr(Random(9999)) + '_' +
                     IntToStr(Random(9999)) + '_' +
                     IntToStr(Random(9999)) + '_' +
                     IntToStr(Random(9999)) + '_' +
                     IntToStr(Random(9999)) + '_' +
                     IntToStr(Random(9999)) + '_' +
                     IntToStr(Random(9999)) + '_' +
                     IntToStr(Random(9999)) + '.csv';

        sArqCSV := sArqCSV + sNomeAux;
        if not FileExists(sArqCSV) then
          Break;
      until (not FileExists(sArqCSV));

      slArquivoCSV.SaveToFile(sArqCSV);
    except
      on e : exception do begin
        MessageDlg('Erro ao gravar registro: ' + chr(10) + e.Message ,mtError,[mbOK],nil);
        Exit;
      end;
    end;

  finally
    FreeAndNil(slArquivoCSV);
  end;

end;

end.
