unit UBOTitulosAReceber;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, System.IniFiles, IdHTTP,
  FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client,  JSon, DateUtils, System.Math ;

  function fBOTitulosAReceber_ValidaPostDelete(dsRegistros : TDataSet; sAcao : string ) : string;

implementation

uses Main, MainModule;

function fBOTitulosAReceber_ValidaPostDelete(dsRegistros : TDataSet; sAcao : string ) : string;
ar
  fqFKTab : TFDQuery;
begin
  Result := '';
  try

    fqFKTab := TFDQuery.Create(nil);
    fqFKTab.Connection := UniMainModule.conexaoDB;
    fqFKTab.Close;

    try

      if dsRegistros.IsEmpty then begin
        Result := Result + 'Não foram encontrados registros para manutenção! |';
        Exit;
      end;

      if sAcao = 'EFETIVAR' then begin

        fqFKTab.Close;
        fqFKTab.SQL.Clear;
        fqFKTab.SQL.Add(' select codPortador from gcPortador ' +
                        ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa) +
                        '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel) +
                        '   and codPortador   = ' + IntToStr(dsRegistros.FieldByName('codPortador').AsInteger)
                        );
        fqFKTab.Active := True;
        if fqFKTab.IsEmpty then begin
          Result := Result + 'Portador deve ser informado para Efetivação da OS! |';
        end;

      end
      else
      if sAcao = 'DELETE' then begin

        fqFKTab.Close;
        fqFKTab.SQL.Clear;
        fqFKTab.SQL.Add(' select codOrdemServico, codItem from gcOrdemServItem ' +
                        ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa) +
                        '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel) +
                        '   and codOrdemServico   = ' + IntToStr(dsRegistros.FieldByName('codOrdemServico').AsInteger)
                        );
        fqFKTab.Active := True;
        if not fqFKTab.IsEmpty then begin
          Result := Result + 'Existem itens cadastrados para a OS, não pode ser eliminada! |';
        end;



      end
      else begin

        if dsRegistros.State = dsInsert then begin

          if (dsRegistros.FieldByName('codTituloAReceber').AsInteger = 0 ) or
             (dsRegistros.FieldByName('codTituloAReceber').IsNull)         then begin
            Result := Result + 'Número do Título deve ser informado! |';
          end;

          fqFKTab.Close;
          fqFKTab.SQL.Clear;
          fqFKTab.SQL.Add(' select codTituloAReceber from gcTitulosAReceber ' +
                          ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa) +
                          '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel) +
                          '   and codTituloAReceber   = ' + IntToStr(dsRegistros.FieldByName('codTituloAReceber').AsInteger)
                          );
          fqFKTab.Active := True;
          if not fqFKTab.IsEmpty then begin
            Result := Result + 'Código ' + dsRegistros.FieldByName('codTituloAReceber').AsString + ' já está cadastrado! |';
          end;
        end;
        {if (dsRegistros.FieldByName('descricao').AsString = '' ) or
           (dsRegistros.FieldByName('descricao').IsNull)         then begin
          Result := Result + 'Descrição deve ser informado! |';
        end;}

        if (dsRegistros.FieldByName('dtVencimento').IsNull)         then begin
          Result := Result + 'Data Vencimento deve ser informado! |';
        end;
        if (dsRegistros.FieldByName('dtEmissao').IsNull)         then begin
          Result := Result + 'Data Emissão deve ser informado! |';
        end;
        if (dsRegistros.FieldByName('dtTransacao').IsNull)         then begin
          Result := Result + 'Data Transação deve ser informado! |';
        end;

        if (dsRegistros.FieldByName('situacao').AsInteger = 0 ) or
           (dsRegistros.FieldByName('situacao').IsNull)         then begin
          Result := Result + 'Situação deve ser informada! |';
        end;
        if (dsRegistros.FieldByName('valorOriginal').AsFloat = 0 ) or
           (dsRegistros.FieldByName('valorOriginal').IsNull)         then begin
          Result := Result + 'Valor Original deve ser informado! |';
        end;
        if (dsRegistros.FieldByName('valorTituloReceber').AsFloat = 0 ) or
           (dsRegistros.FieldByName('valorTituloReceber').IsNull)         then begin
          Result := Result + 'Valor Título deve ser informado! |';
        end;


        fqFKTab.Close;
        fqFKTab.SQL.Clear;
        fqFKTab.SQL.Add(' select codEmitente from gcEmitente ' +
                        ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa) +
                        '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel) +
                        '   and codEmitente   = ' + IntToStr(dsRegistros.FieldByName('codEmitente').AsInteger)
                        );
        fqFKTab.Active := True;
        if fqFKTab.IsEmpty then begin
          Result := Result + 'Emitente informado ' + dsRegistros.FieldByName('codEmitente').AsString + ' não encontrado! |';
        end;

        fqFKTab.Close;
        fqFKTab.SQL.Clear;
        fqFKTab.SQL.Add(' select codEmitente, codLocal from gcEmitenteEndereco ' +
                        ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa) +
                        '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel) +
                        '   and codEmitente   = ' + IntToStr(dsRegistros.FieldByName('codEmitente').AsInteger)   +
                        '   and codLocal   = ' + QuotedStr(dsRegistros.FieldByName('codLocal').AsString)
                        );
        fqFKTab.Active := True;
        if fqFKTab.IsEmpty then begin
          Result := Result + 'Emitente/Local informado ' + dsRegistros.FieldByName('codEmitente').AsString + '/' + dsRegistros.FieldByName('codLocal').AsString + ' não encontrado! |';
        end;

        fqFKTab.Close;
        fqFKTab.SQL.Clear;
        fqFKTab.SQL.Add(' select codMaqEquip from gcMaquinaEquipamento ' +
                        ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa) +
                        '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel) +
                        '   and codMaqEquip   = ' + IntToStr(dsRegistros.FieldByName('codMaqEquip').AsInteger)
                        );
        fqFKTab.Active := True;
        if fqFKTab.IsEmpty then begin
          Result := Result + 'Máquina/Equip informado ' + dsRegistros.FieldByName('codMaqEquip').AsString + ' não encontrado! |';
        end;

        fqFKTab.Close;
        fqFKTab.SQL.Clear;
        fqFKTab.SQL.Add(' select codCondPagto from gcCondicaoPagamento ' +
                        ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa) +
                        '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel) +
                        '   and codCondPagto   = ' + IntToStr(dsRegistros.FieldByName('codCondPagto').AsInteger)
                        );
        fqFKTab.Active := True;
        if fqFKTab.IsEmpty then begin
          Result := Result + 'Condição Pagto informada ' + dsRegistros.FieldByName('codCondPagto').AsString + ' não encontrado! |';
        end;


        if dsRegistros.FieldByName('tipoPreco').AsInteger = 1  then begin  //tab preco
          fqFKTab.Close;
          fqFKTab.SQL.Clear;
          fqFKTab.SQL.Add(' select codTabPreco from gcTabelaPreco ' +
                          ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa) +
                          '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel) +
                          '   and codTabPreco   = ' + IntToStr(dsRegistros.FieldByName('codTabPreco').AsInteger)
                          );
          fqFKTab.Active := True;
          if fqFKTab.IsEmpty then begin
            Result := Result + 'Tabela de Preço informado ' + dsRegistros.FieldByName('codTabPreco').AsString + ' não encontrado! |';
          end;
        end;

        if (dsRegistros.FieldByName('codFormaPagto').AsInteger > 0 )    and
           (not dsRegistros.FieldByName('codFormaPagto').IsNull)        then begin

          fqFKTab.Close;
          fqFKTab.SQL.Clear;
          fqFKTab.SQL.Add(' select codFormaPagto from gcFormaPagamento ' +
                          ' where codEmpresa = ' + IntToStr(MainForm.iCodEmpresa) +
                          '   and codEstabel = ' + IntToStr(MainForm.iCodEstabel) +
                          '   and codFormaPagto   = ' + IntToStr(dsRegistros.FieldByName('codFormaPagto').AsInteger)
                          );
          fqFKTab.Active := True;
          if fqFKTab.IsEmpty then begin
            Result := Result + 'Forma Pagto informada ' + dsRegistros.FieldByName('codFormaPagto').AsString + ' não encontrado! |';
          end;
        end;


      end;

      if Result = '' then
        Result := 'OK';

    except
      on e : exception do begin
        Result := 'Erro ao gravar registro: ' + e.message;
      end;
    end;
  finally
    FreeAndNil(fqFKTab);
  end;



end;


end.
